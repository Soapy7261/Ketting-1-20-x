--- a/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -10,7 +_,23 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 
-public class ShapedRecipe implements CraftingRecipe {
+// CraftBukkit start
+// CraftBukkit end
+
+public class ShapedRecipe implements CraftingRecipe, net.minecraftforge.common.crafting.IShapedRecipe<CraftingContainer> {
+   static int MAX_WIDTH = 3;
+   static int MAX_HEIGHT = 3;
+   /**
+    * Expand the max width and height allowed in the deserializer.
+    * This should be called by modders who add custom crafting tables that are larger than the vanilla 3x3.
+    * @param width your max recipe width
+    * @param height your max recipe height
+    */
+   public static void setCraftingSize(int width, int height) {
+      if (MAX_WIDTH < width) MAX_WIDTH = width;
+      if (MAX_HEIGHT < height) MAX_HEIGHT = height;
+   }
+
    final ShapedRecipePattern pattern;
    final ItemStack result;
    final String group;
@@ -29,6 +_,68 @@
       this(p_272759_, p_273506_, p_310709_, p_272852_, true);
    }
 
+   // CraftBukkit start
+   @Override
+   public org.bukkit.inventory.ShapedRecipe toBukkitRecipe(org.bukkit.NamespacedKey id) {
+      org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack result = org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack.asCraftMirror(this.result);
+      org.bukkit.craftbukkit.v1_20_R3.inventory.CraftShapedRecipe recipe = new org.bukkit.craftbukkit.v1_20_R3.inventory.CraftShapedRecipe(id, result, this);
+      recipe.setGroup(this.group);
+      recipe.setCategory(org.bukkit.craftbukkit.v1_20_R3.inventory.CraftRecipe.getCategory(this.category()));
+
+      switch (this.pattern.height()) {
+         case 1:
+            switch (this.pattern.width()) {
+               case 1:
+                  recipe.shape("a");
+                  break;
+               case 2:
+                  recipe.shape("ab");
+                  break;
+               case 3:
+                  recipe.shape("abc");
+                  break;
+            }
+            break;
+         case 2:
+            switch (this.pattern.width()) {
+               case 1:
+                  recipe.shape("a","b");
+                  break;
+               case 2:
+                  recipe.shape("ab","cd");
+                  break;
+               case 3:
+                  recipe.shape("abc","def");
+                  break;
+            }
+            break;
+         case 3:
+            switch (this.pattern.width()) {
+               case 1:
+                  recipe.shape("a","b","c");
+                  break;
+               case 2:
+                  recipe.shape("ab","cd","ef");
+                  break;
+               case 3:
+                  recipe.shape("abc","def","ghi");
+                  break;
+            }
+            break;
+      }
+      char c = 'a';
+      for (Ingredient list : this.pattern.ingredients()) {
+         org.bukkit.inventory.RecipeChoice choice = org.bukkit.craftbukkit.v1_20_R3.inventory.CraftRecipe.toBukkit(list);
+         if (choice != null) {
+            recipe.setIngredient(c, choice);
+         }
+
+         c++;
+      }
+      return recipe;
+   }
+   // CraftBukkit end
+
    public RecipeSerializer<?> getSerializer() {
       return RecipeSerializer.SHAPED_RECIPE;
    }
@@ -37,10 +_,20 @@
       return this.group;
    }
 
+   @Override
+   public int getRecipeWidth() {
+      return getWidth();
+   }
+
    public CraftingBookCategory category() {
       return this.category;
    }
 
+   @Override
+   public int getRecipeHeight() {
+      return getHeight();
+   }
+
    public ItemStack getResultItem(RegistryAccess p_266881_) {
       return this.result;
    }
@@ -78,7 +_,7 @@
       return nonnulllist.isEmpty() || nonnulllist.stream().filter((p_151277_) -> {
          return !p_151277_.isEmpty();
       }).anyMatch((p_151273_) -> {
-         return p_151273_.getItems().length == 0;
+         return net.minecraftforge.common.ForgeHooks.hasNoElements(p_151273_);
       });
    }
 
