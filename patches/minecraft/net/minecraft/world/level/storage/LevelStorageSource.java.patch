--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -139,6 +_,8 @@
       WorldDimensions.Complete worlddimensions$complete = worldgensettings.dimensions().bake(p_311619_);
       Lifecycle lifecycle = worlddimensions$complete.lifecycle().add(p_313214_.allRegistriesLifecycle());
       PrimaryLevelData primaryleveldata = PrimaryLevelData.parse(dynamic, levelsettings, worlddimensions$complete.specialWorldProperty(), worldgensettings.options(), lifecycle);
+      primaryleveldata.pdc = ((Dynamic<Tag>) dynamic1).getElement("BukkitValues", null); // CraftBukkit - Add PDC to world
+
       return new LevelDataAndDimensions(primaryleveldata, worlddimensions$complete);
    }
 
@@ -343,24 +_,46 @@
    }
 
+   //Ketting start
+   public final java.util.concurrent.atomic.AtomicReference<ResourceKey<LevelStem>> ketting$validateAndCreateAccess$dimensionType = new java.util.concurrent.atomic.AtomicReference<>(null);
+   public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String p_289980_, ResourceKey<LevelStem> dimensionType) throws IOException, ContentValidationException {
+      ketting$validateAndCreateAccess$dimensionType.set(dimensionType);
+      return validateAndCreateAccess(p_289980_);
+   }
+   //Ketting end
+
    public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String p_289980_) throws IOException, ContentValidationException {
       Path path = this.getLevelPath(p_289980_);
       List<ForbiddenSymlinkInfo> list = this.worldDirValidator.validateDirectory(path, true);
       if (!list.isEmpty()) {
          throw new ContentValidationException(path, list);
       } else {
+         LevelStorageAccess.ketting$dimensionType = ketting$validateAndCreateAccess$dimensionType.getAndSet(null);
          return new LevelStorageSource.LevelStorageAccess(p_289980_, path);
       }
    }
 
+   //Ketting start - try merging both world systems
+   public LevelStorageSource.LevelStorageAccess deriveFromSource(LevelStorageSource.LevelStorageAccess source, ResourceKey<LevelStem> dimensionType) throws IOException {
+      return new LevelStorageSource.LevelStorageAccess(source, dimensionType);
+   }
+
+   public final java.util.concurrent.atomic.AtomicReference<ResourceKey<LevelStem>> ketting$createAccess$dimensionType = new java.util.concurrent.atomic.AtomicReference<>(null);
+
+   @SuppressWarnings("unused") //Ketting - CB compat
+   public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_, ResourceKey<LevelStem> dimensionType) throws IOException { // CraftBukkit
+      ketting$createAccess$dimensionType.set(dimensionType);
+      return this.createAccess(p_78261_);
+   }
+   //Ketting end
+
    public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_) throws IOException {
       Path path = this.getLevelPath(p_78261_);
+      LevelStorageAccess.ketting$dimensionType = ketting$createAccess$dimensionType.getAndSet(null); //Ketting
       return new LevelStorageSource.LevelStorageAccess(p_78261_, path);
    }
 
@@ -352,6 +_,20 @@
       return this.worldDirValidator;
    }
 
+   // CraftBukkit start
+   public static Path getStorageFolder(Path path, ResourceKey<LevelStem> dimensionType) {
+      if (dimensionType == LevelStem.OVERWORLD) {
+         return path;
+      } else if (dimensionType == LevelStem.NETHER) {
+         return path.resolve("DIM-1");
+      } else if (dimensionType == LevelStem.END) {
+         return path.resolve("DIM1");
+      } else {
+         return path.resolve("dimensions").resolve(dimensionType.location().getNamespace()).resolve(dimensionType.location().getPath());
+      }
+   }
+   // CraftBukkit end
+
    public static record LevelCandidates(List<LevelStorageSource.LevelDirectory> levels) implements Iterable<LevelStorageSource.LevelDirectory> {
       public boolean isEmpty() {
          return this.levels.isEmpty();
@@ -410,8 +_,18 @@
       public final LevelStorageSource.LevelDirectory levelDirectory;
       private final String levelId;
       private final Map<LevelResource, Path> resources = Maps.newHashMap();
+      // CraftBukkit start
+      public @Nullable ResourceKey<LevelStem> dimensionType;
+
+      //Ketting start
+      public static @Nullable ResourceKey<LevelStem> ketting$dimensionType;
+      public final Path dimensionPath;
+
+      public void setDimensionType(ResourceKey<LevelStem> dimensionType) {
+          this.dimensionType = dimensionType;
+      }
+      //Ketting end
 
       LevelStorageAccess(String p_289967_, Path p_289988_) throws IOException {
          this.levelId = p_289967_;
          this.levelDirectory = new LevelStorageSource.LevelDirectory(p_289988_);
          this.lock = DirectoryLock.create(p_289988_);
-      }
+         //Ketting start
+         this.dimensionPath = p_289988_;
+         this.dimensionType = ketting$dimensionType;
+         ketting$dimensionType = null;
+      }
+      
+      //Ketting start
+      LevelStorageAccess(LevelStorageAccess original, ResourceKey<LevelStem> dimensionType) {
+         this.dimensionType = dimensionType;
+
+         this.levelId = original.levelId;
+         this.dimensionPath = original.dimensionPath;
+         this.levelDirectory = original.levelDirectory;
+         this.lock = original.lock;
+         this.resources.putAll(original.resources);
+      }
+      @SuppressWarnings("unused") //Ketting - keep for CB compat
+      LevelStorageAccess(String p_289967_, Path p_289988_, ResourceKey<LevelStem> dimensionType) throws IOException {
+         this(p_289967_, p_289988_);
+         this.dimensionType = dimensionType;
+      }
+      //Ketting end
+
 
       public String getLevelId() {
          return this.levelId;
@@ -413,7 +_,7 @@
       }
 
       public Path getDimensionPath(ResourceKey<Level> p_197395_) {
-         return DimensionType.getStorageFolder(p_197395_, this.levelDirectory.path());
+         return getStorageFolder(this.levelDirectory.path(), this.dimensionType); // CraftBukkit
       }
 
       private void checkLock() {
@@ -483,6 +_,7 @@
          CompoundTag compoundtag = p_78292_.createTag(p_78291_, p_78293_);
          CompoundTag compoundtag1 = new CompoundTag();
          compoundtag1.put("Data", compoundtag);
+         net.minecraftforge.common.ForgeHooks.writeAdditionalLevelSaveData(p_78292_, compoundtag1);
          this.saveLevelData(compoundtag1);
       }
 
@@ -503,6 +_,10 @@
 
       public Optional<Path> getIconFile() {
          return !this.lock.isValid() ? Optional.empty() : Optional.of(this.levelDirectory.iconFile());
+      }
+
+      public Path getWorldDir() {
+         return baseDir;
       }
 
       public void deleteLevel() throws IOException {
