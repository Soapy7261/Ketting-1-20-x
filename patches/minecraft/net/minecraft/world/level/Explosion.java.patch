--- a/net/minecraft/world/level/Explosion.java
+++ b/net/minecraft/world/level/Explosion.java
@@ -57,6 +_,10 @@
    private final SoundEvent explosionSound;
    private final ObjectArrayList<BlockPos> toBlow = new ObjectArrayList<>();
    private final Map<Player, Vec3> hitPlayers = Maps.newHashMap();
+   // CraftBukkit - add field
+   public boolean wasCanceled = false;
+   public float yield;
+   // CraftBukkit end
 
    public static DamageSource getDefaultDamageSource(Level p_309890_, @Nullable Entity p_311046_) {
       return p_309890_.damageSources().explosion(p_311046_, getIndirectSourceEntityInternal(p_311046_));
@@ -79,7 +_,7 @@
    public Explosion(Level p_46051_, @Nullable Entity p_46052_, @Nullable DamageSource p_46053_, @Nullable ExplosionDamageCalculator p_46054_, double p_46055_, double p_46056_, double p_46057_, float p_46058_, boolean p_46059_, Explosion.BlockInteraction p_46060_, ParticleOptions p_312175_, ParticleOptions p_310459_, SoundEvent p_311795_) {
       this.level = p_46051_;
       this.source = p_46052_;
-      this.radius = p_46058_;
+      this.radius = (float) Math.max(p_46058_, 0.0); // CraftBukkit - clamp bad values
       this.x = p_46055_;
       this.y = p_46056_;
       this.z = p_46057_;
@@ -90,6 +_,7 @@
       this.smallExplosionParticles = p_312175_;
       this.largeExplosionParticles = p_310459_;
       this.explosionSound = p_311795_;
+      this.yield = this.blockInteraction == Explosion.BlockInteraction.DESTROY_WITH_DECAY ? 1.0F / this.radius : 1.0F; // CraftBukkit
    }
 
    private ExplosionDamageCalculator makeDamageCalculator(@Nullable Entity p_46063_) {
@@ -138,6 +_,11 @@
    }
 
    public void explode() {
+      // CraftBukkit start
+      if (this.radius < 0.1F) {
+         return;
+      }
+      // CraftBukkit end
       this.level.gameEvent(this.source, GameEvent.EXPLODE, new Vec3(this.x, this.y, this.z));
       Set<BlockPos> set = Sets.newHashSet();
       int i = 16;
@@ -193,6 +_,7 @@
       int j2 = Mth.floor(this.z - (double)f2 - 1.0D);
       int j1 = Mth.floor(this.z + (double)f2 + 1.0D);
       List<Entity> list = this.level.getEntities(this.source, new AABB((double)k1, (double)i2, (double)j2, (double)l1, (double)i1, (double)j1));
+      net.minecraftforge.event.ForgeEventFactory.onExplosionDetonate(this.level, this, list, f2);
       Vec3 vec3 = new Vec3(this.x, this.y, this.z);
 
       for(Entity entity : list) {
@@ -208,7 +_,37 @@
                   d7 /= d12;
                   d9 /= d12;
                   if (this.damageCalculator.shouldDamageEntity(this, entity)) {
-                     entity.hurt(this.damageSource, this.damageCalculator.getEntityDamageAmount(this, entity));
+                     // CraftBukkit start
+                     // Special case ender dragon only give knockback if no damage is cancelled
+                     // Thinks to note:
+                     // - Setting a velocity to a ComplexEntityPart is ignored (and therefore not needed)
+                     // - Damaging ComplexEntityPart while forward the damage to EntityEnderDragon
+                     // - Damaging EntityEnderDragon does nothing
+                     // - EntityEnderDragon hitbock always covers the other parts and is therefore always present
+                     if (entity instanceof net.minecraft.world.entity.boss.EnderDragonPart) {
+                        continue;
+                     }
+
+                     org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.entityDamage = source;
+                     entity.lastDamageCancelled = false;
+
+                     if (entity instanceof net.minecraft.world.entity.boss.enderdragon.EnderDragon dragon) {
+                        for (net.minecraft.world.entity.boss.EnderDragonPart subEntity : dragon.subEntities) {
+                           double d7part;
+                           if (list.contains(subEntity) && (d7part = Math.sqrt(subEntity.distanceToSqr(vec3)) / f2) <= 1.0D) {
+                              double d13part = (1.0D - d7part) * getSeenPercent(vec3, subEntity);
+                              subEntity.hurt(this.damageSource, (float) ((int) ((d13part * d13part + d13part) / 2.0D * 7.0D * (double) f2 + 1.0D)));
+                           }
+                        }
+                     } else {
+                        entity.hurt(this.damageSource, this.damageCalculator.getEntityDamageAmount(this, entity));
+                     }
+
+                     org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.entityDamage = null;
+                     if (entity.lastDamageCancelled) { // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Skip entity if damage event was cancelled
+                        continue;
+                     }
+                     // CraftBukkit end
                   }
 
                   double d13 = (1.0D - d11) * (double)getSeenPercent(vec3, entity);
@@ -260,7 +_,62 @@
          List<Pair<ItemStack, BlockPos>> list = new ArrayList<>();
          Util.shuffle(this.toBlow, this.level.random);
 
+         // CraftBukkit start
+         org.bukkit.World bworld = this.level.getWorld();
+         org.bukkit.entity.Entity explode = this.source == null ? null : this.source.getBukkitEntity();
+         org.bukkit.Location location = new org.bukkit.Location(bworld, this.x, this.y, this.z);
+
+         List<org.bukkit.block.Block> blockList = new ObjectArrayList<>();
+         for (int i1 = this.toBlow.size() - 1; i1 >= 0; i1--) {
+             BlockPos cpos = this.toBlow.get(i1);
+             org.bukkit.block.Block bblock = bworld.getBlockAt(cpos.getX(), cpos.getY(), cpos.getZ());
+             if (!bblock.getType().isAir()) {
+                 blockList.add(bblock);
+             }
+         }
+
+         List<org.bukkit.block.Block> bukkitBlocks;
+
+         if (explode != null) {
+             org.bukkit.event.entity.EntityExplodeEvent event = new org.bukkit.event.entity.EntityExplodeEvent(explode, location, blockList, this.yield);
+             this.level.getCraftServer().getPluginManager().callEvent(event);
+             this.wasCanceled = event.isCancelled();
+             bukkitBlocks = event.blockList();
+             this.yield = event.getYield();
+         } else {
+             org.bukkit.event.block.BlockExplodeEvent event = new org.bukkit.event.block.BlockExplodeEvent(location.getBlock(), blockList, this.yield);
+             this.level.getCraftServer().getPluginManager().callEvent(event);
+             this.wasCanceled = event.isCancelled();
+             bukkitBlocks = event.blockList();
+             this.yield = event.getYield();
+         }
+
+         this.toBlow.clear();
+
+         for (org.bukkit.block.Block bblock : bukkitBlocks) {
+             BlockPos coords = new BlockPos(bblock.getX(), bblock.getY(), bblock.getZ());
+             toBlow.add(coords);
+         }
+
+         if (this.wasCanceled) {
+             return;
+         }
+         // CraftBukkit end
+
          for(BlockPos blockpos : this.toBlow) {
+            // CraftBukkit start - TNTPrimeEvent
+            BlockState iblockdata = this.level.getBlockState(blockpos);
+            Block block = iblockdata.getBlock();
+            if (block instanceof net.minecraft.world.level.block.TntBlock) {
+                Entity sourceEntity = source == null ? null : source;
+               BlockPos sourceBlock = sourceEntity == null ? BlockPos.containing(this.x, this.y, this.z) : null;
+                if (!org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callTNTPrimeEvent(this.level, blockpos, org.bukkit.event.block.TNTPrimeEvent.PrimeCause.EXPLOSION, sourceEntity, sourceBlock)) {
+                    this.level.sendBlockUpdated(blockpos, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(), iblockdata, 3); // Update the block on the client
+                    continue;
+                }
+            }
+            // CraftBukkit end
+
             this.level.getBlockState(blockpos).onExplosionHit(this.level, blockpos, this, (p_309264_, p_309265_) -> {
                addOrAppendStack(list, p_309264_, p_309265_);
             });
@@ -276,7 +_,11 @@
       if (this.fire) {
          for(BlockPos blockpos1 : this.toBlow) {
             if (this.random.nextInt(3) == 0 && this.level.getBlockState(blockpos1).isAir() && this.level.getBlockState(blockpos1.below()).isSolidRender(this.level, blockpos1.below())) {
-               this.level.setBlockAndUpdate(blockpos1, BaseFireBlock.getState(this.level, blockpos1));
+               // CraftBukkit start - Ignition by explosion
+               if (!org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callBlockIgniteEvent(this.level, blockpos1, this).isCancelled()) {
+                  this.level.setBlockAndUpdate(blockpos1, BaseFireBlock.getState(this.level, blockpos1));
+               }
+               // CraftBukkit end
             }
          }
       }
@@ -284,6 +_,8 @@
    }
 
    private static void addOrAppendStack(List<Pair<ItemStack, BlockPos>> p_311090_, ItemStack p_311817_, BlockPos p_309821_) {
+     if (p_311817_.isEmpty()) return; // CraftBukkit - SPIGOT-5425
+
       for(int i = 0; i < p_311090_.size(); ++i) {
          Pair<ItemStack, BlockPos> pair = p_311090_.get(i);
          ItemStack itemstack = pair.getFirst();
@@ -345,6 +_,16 @@
 
    public List<BlockPos> getToBlow() {
       return this.toBlow;
+   }
+
+   @Deprecated(forRemoval = true, since = "1.20.4")
+   public Vec3 getPosition() {
+      return this.center();
+   }
+
+   @Nullable
+   public Entity getExploder() {
+      return this.source;
    }
 
    public Explosion.BlockInteraction getBlockInteraction() {
