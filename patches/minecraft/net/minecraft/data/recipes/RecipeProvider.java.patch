--- a/net/minecraft/data/recipes/RecipeProvider.java
+++ b/net/minecraft/data/recipes/RecipeProvider.java
@@ -87,13 +_,15 @@
       final Set<ResourceLocation> set = Sets.newHashSet();
       final List<CompletableFuture<?>> list = new ArrayList<>();
       this.buildRecipes(new RecipeOutput() {
-         public void accept(ResourceLocation p_312383_, Recipe<?> p_312007_, @Nullable AdvancementHolder p_311384_) {
+         public void accept(ResourceLocation p_312383_, Recipe<?> p_312007_, @Nullable ResourceLocation advancementId, @Nullable com.google.gson.JsonElement advancement) {
             if (!set.add(p_312383_)) {
                throw new IllegalStateException("Duplicate recipe " + p_312383_);
             } else {
                list.add(DataProvider.saveStable(p_254020_, Recipe.CODEC, p_312007_, RecipeProvider.this.recipePathProvider.json(p_312383_)));
-               if (p_311384_ != null) {
-                  list.add(DataProvider.saveStable(p_254020_, Advancement.CODEC, p_311384_.value(), RecipeProvider.this.advancementPathProvider.json(p_311384_.id())));
+               if (advancement != null) {
+                  var saveAdvancementFuture = saveAdvancement(p_254020_, advancementId, advancement);
+                  if (saveAdvancementFuture != null)
+                     list.add(saveAdvancementFuture);
                }
 
             }
@@ -106,15 +_,25 @@
       return CompletableFuture.allOf(list.toArray((p_253414_) -> {
          return new CompletableFuture[p_253414_];
       }));
    }
 
+   /**
+    * Called every time a recipe is saved to also save the advancement JSON if it exists.
+    *
+    * @return A completable future that saves the advancement to disk, or null to cancel saving the advancement.
+    */
+   @Nullable
+   protected CompletableFuture<?> saveAdvancement(CachedOutput output, ResourceLocation advancementId, com.google.gson.JsonElement advancement) {
+      return DataProvider.saveStable(output, advancement, this.advancementPathProvider.json(advancementId));
+   }
+
    protected CompletableFuture<?> buildAdvancement(CachedOutput p_253674_, AdvancementHolder p_297687_) {
       return DataProvider.saveStable(p_253674_, p_297687_.value().serializeToJson(), this.advancementPathProvider.json(p_297687_.id()));
    }
 
    protected abstract void buildRecipes(RecipeOutput p_297267_);
 
-   protected static void generateForEnabledBlockFamilies(RecipeOutput p_300618_, FeatureFlagSet p_251836_) {
+   protected void generateForEnabledBlockFamilies(RecipeOutput p_300618_, FeatureFlagSet p_251836_) {
       BlockFamilies.getAllFamilies().filter((p_248034_) -> {
          return p_248034_.shouldGenerateRecipe(p_251836_);
       }).forEach((p_296363_) -> {
